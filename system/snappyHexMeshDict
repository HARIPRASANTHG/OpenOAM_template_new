/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2206                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      snappyHexMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

castellatedMesh true;
snap            true;
addLayers       true;

geometry
{
    bodyFaces
    {
	    type triSurfaceMesh;
        file "ahmed_body.stl";
    }
    outerDomainFaces
    {
	    type triSurfaceMesh;
        file "outer_domain.stl";
    }
    internalVRFaces
    {
	    type triSurfaceMesh;
        file "ref_zone1.stl";
    }
}

castellatedMeshControls
{
    maxLocalCells       1000000;
    maxGlobalCells      100000000;
    minRefinementCells  10;
    maxLoadUnbalance    0.10;
    nCellsBetweenLevels 3;
    resolveFeatureAngle 30;
    allowFreeStandingZoneFaces true;
    features
    (
        {
            file "ahmed_body.eMesh";
            level 6;
        }
        {
            file "outer_domain.eMesh";
            level 0;
        }
    );

    refinementSurfaces
    {
        bodyFaces
        {
            level (5 6);
            patchInfo
            {
                type wall;
                // inGroups (motorBikeGroup);
            }
        }
        outerDomainFaces
        {
            level (0 0);

            // faceZone        outerDomainFaces;
            // cellZone        outerDomainFaces;
            // cellZoneInside  insidePoint;
            // insidePoint     (-2.4 0.0 1.4);

            // patchInfo
            // {
            //     // type wall;
            //     // inGroups (motorBikeGroup);
            // }
        }
    }

    refinementRegions
    {
        internalVRFaces
        {
            mode inside;
            levels ((2 2));
        }
    }

    locationInMesh (-1.0 -0.6 1.2);
    gapLevelIncrement 2;
    allowFreeStandingZoneFaces false;
}

snapControls
{
    nSmoothPatch    3;
    tolerance       2.0;
    nSolveIter      100;
    nRelaxIter      5;

    nFeatureSnapIter 10;

    explicitFeatureSnap    true;
    multiRegionFeatureSnap false;
    implicitFeatureSnap    true;
}

addLayersControls
{
    relativeSizes true;

    layers
    {
        bodyFaces
        {
            nSurfaceLayers 10;
        }
    }

    expansionRatio 1.5;
    finalLayerThickness 0.3;
    minThickness 0.1;

    featureAngle              100;
    slipFeatureAngle          30;

    nLayerIter                50;
    nRelaxedIter              20;
    nRelaxIter                5;

    nGrow                     0;

    nSmoothSurfaceNormals     1;
    nSmoothNormals            3;
    nSmoothThickness          10;
    maxFaceThicknessRatio     0.5;
    maxThicknessToMedialRatio 0.3;

    minMedialAxisAngle        90;
    nMedialAxisIter           10;

    nBufferCellsNoExtrude     0;
    additionalReporting       false;
//    nSmoothDisplacement       0;
//    detectExtrusionIsland     false;
}

meshQualityControls
{
    #include "<system>/meshQualityDict"
}

writeFlags
(
    scalarLevels
    layerSets
    layerFields     // write volScalarField for layer coverage
);

debug 0;
mergeTolerance 1e-6;

// ************************************************************************* //
